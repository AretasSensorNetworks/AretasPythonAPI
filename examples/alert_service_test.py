"""
Basic testing for the alert service object

Tests the CRUD operations: list, save, update, remove
"""
from auth import *
from aretas_client import *
from alert_service import AlertService
from entities import Alert

import os
import time

# Change to parent directory to find config
os.chdir('../')

# Initialize API components
config = APIConfig('config.ini')
auth = APIAuth(config)
client = APIClient(auth)

client_location_view: ClientLocationView = client.get_client_location_view()

my_client_id = client_location_view.id
alert_service = AlertService(auth)

print("=== Alert Service Test ===\n")

# Test 1: List existing alerts
print("1. Testing alert listing...")
alerts = alert_service.list()
if alerts is not None:
    print(f"Found {len(alerts)} alerts")
    for i, alert in enumerate(alerts):
        print(f"  Alert {i+1}: {alert.name} (ID: {alert.id})")
else:
    print("  No alerts found or error occurred")

print()

# Test 2: Create a new alert
print("2. Testing alert creation...")
new_alert = Alert(
    id="",  # ID is auto-generated by the API
    owner=my_client_id,  # Must be populated with client ID
    name="Test Alert from Python",
    description="This is a test alert created from the Python API",
    sensorType=5,  # CO2 sensor type
    sensorMacs="123456789",  # Dummy MAC address
    thresholdA=1000.0,  # CO2 threshold
    thresholdAType=True,  # Ceiling type (trigger when above threshold)
    alertEmails="test@example.com",
    disabled=False,
    alertFrequency=60,  # minutes
    maxNumAlerts=5,
    durationTrigger=300000,  # 5 minutes in milliseconds
    alertTriggerTTL=3600  # 1 hour in seconds
)

save_result = alert_service.save(new_alert)
print(f"  Save result: {save_result}")

print()

# Test 3: List alerts again to verify creation
print("3. Testing alert listing after creation...")
alerts_after_create = alert_service.list()
if alerts_after_create is not None:
    print(f"Found {len(alerts_after_create)} alerts after creation")
    
    # Find our test alert
    test_alert = None
    for alert in alerts_after_create:
        if alert.name == "Test Alert from Python":
            test_alert = alert
            break
    
    if test_alert:
        print(f"  Found our test alert: {test_alert.name} (ID: {test_alert.id})")
        
        # Test 4: Update the alert
        print("\n4. Testing alert update...")
        test_alert.description = "Updated description from Python API test"
        test_alert.thresholdA = 1200.0  # Updated threshold
        
        update_result = alert_service.update(test_alert)
        print(f"  Update result: {update_result}")
        
        # Test 5: Delete the alert
        print("\n5. Testing alert removal...")
        remove_result = alert_service.remove(test_alert)
        print(f"  Remove result: {remove_result}")
        
        # Test 6: List alerts again to verify deletion
        print("\n6. Testing alert listing after deletion...")
        alerts_after_delete = alert_service.list()
        if alerts_after_delete is not None:
            print(f"Found {len(alerts_after_delete)} alerts after deletion")
            
            # Verify our test alert is gone
            found_test_alert = False
            for alert in alerts_after_delete:
                if alert.name == "Test Alert from Python":
                    found_test_alert = True
                    break
            
            if not found_test_alert:
                print("  ✓ Test alert successfully removed")
            else:
                print("  ✗ Test alert still exists after removal")
        else:
            print("  Error listing alerts after deletion")
    else:
        print("  ✗ Could not find our test alert after creation")
else:
    print("  Error listing alerts after creation")

print("\n=== Alert Service Test Complete ===")